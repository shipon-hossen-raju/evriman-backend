generator client {
  provider = "prisma-client-js"
}

// Database connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// =======================================================
// ===================== Global Schema Start =============
// =======================================================

// ====================== User ======================
enum LoginType {
  USER
  PARTNER
}

enum VerificationStatus {
  PENDING
  APPROVED
  CHECKING
  REJECTED
}

enum UserRole {
  ADMIN
  PARTNER
  USER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum PartnerType {
  MORTGAGE_BROKER
  OTHER
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String     @unique
  fullName      String
  email         String     @unique
  otp           Int?
  expirationOtp DateTime?
  password      String
  address       String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  loginType     LoginType  @default(USER)
  phoneNumber   String
  dob           DateTime?
  age           Int        @default(0)
  idDocument    String?

  referralCodeUsed String?
  referralCode     String  @unique
  userPoint        Int     @default(0)

  // Relation: Users who used this user's referral code
  referredUsers UserReferral[] @relation("ReferrerToReferred")
  // Relation: This user used which referral code
  usedReferral  UserReferral[] @relation("ReferredToReferrer")

  termsAccepted   Boolean @default(false)
  privacyAccepted Boolean @default(false)
  isVerified      Boolean @default(false)
  isDeceased      Boolean @default(false)

  userImage    String @default("")
  partnerImage String @default("")

  offerCodes            UserOfferCode[]
  UserDynamicFieldValue UserDynamicFieldValue[]
  ContactList           ContactList[]
  contactLimit          Int                     @default(1)
  memories              UserMemory[]            @relation("UserMemories")
  deathVerification     DeathVerification[]
  memoryClaimRequests   MemoryClaimRequest[]
  partner               PartnerCode?            @relation(fields: [partnerCodeId], references: [id])
  partnerCodeId         String?                 @db.ObjectId

  // partner information
  businessName      String?
  partnerType       PartnerType?
  partnerAgreement  Boolean?
  bankName          String?             @default("")
  accountHolderName String?             @default("")
  accountNumber     String?             @default("")
  shortCode         String?             @default("")
  partnerStatus     VerificationStatus? @default(PENDING)

  isPartner                Boolean  @default(false)
  isUser                   Boolean  @default(false)
  isPaid                   Boolean  @default(false)
  isCompleteProfile        Boolean  @default(false)
  isCompletePartnerProfile Boolean  @default(false)
  lastLogin                DateTime @default(now())

  payments Payment[] @relation("PaymentUser")

  @@map("users")
}

// Death verification model
model DeathVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  requesterName  String
  requesterEmail String
  requesterPhone String
  requesterImage String

  deceasedName      String
  deceasedProfileId String
  relationship      String
  deceasedDob       DateTime
  deathCertificate  String
  optionalNote      String?
  extraNote         String?

  status VerificationStatus @default(PENDING)

  user   User?   @relation(fields: [userId], references: [userId])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("death_verification")
}

model MemoryClaimRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Claimant Information
  claimantName  String
  claimantEmail String
  claimantPhone String
  claimantDob   DateTime

  // Deceased Information
  deceasedName      String
  deceasedProfileId String
  relationship      String
  deceasedDob       DateTime

  // File Upload & Notes
  deathCertificate String
  optionalNote     String?
  contactId        String? @db.ObjectId

  status VerificationStatus @default(PENDING)
  user   User?              @relation(fields: [userId], references: [userId])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("memory_claim_requests")
}

// =======================================================
// ===================== Global Schema End ===============
// =======================================================

// ===================== UserReferral Model =====================
model UserReferral {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  referrer   User     @relation("ReferrerToReferred", fields: [referrerId], references: [id])
  referrerId String   @db.ObjectId
  referred   User     @relation("ReferredToReferrer", fields: [referredId], references: [id])
  referredId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@map("user_referrals")
}

// =======================================================
// ===================== User Start ======================
// =======================================================

// =============== Contact List ===================
model ContactList {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  name         String
  email        String?
  phoneNumber  String?
  photoUrl     String?
  dateOfBirth  DateTime
  relationship String
  isOver18     Boolean
  note         String?
  createdAt    DateTime @default(now())

  isDeath       Boolean @default(false)
  isDeathNotify Boolean @default(false)

  // Guardian Details (only for under 18)
  guardianName        String?
  guardianEmail       String?
  guardianDob         DateTime?
  guardianPhoneNumber String?

  userMemories      UserMemory[]        @relation("ContactListToUserMemories")
  UserMemoryContact UserMemoryContact[]

  @@map("contact_list")
}

// memory model
model UserMemory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String
  files   String[] // List of media file URLs (images, audio, video)

  userId     String   @db.ObjectId
  user       User     @relation("UserMemories", fields: [userId], references: [id])
  contactIds String[] @db.ObjectId
  tagId      String   @db.ObjectId
  tag        Tags     @relation("TagsToUserMemories", fields: [tagId], references: [id])
  publish    DateTime @default(now())

  contacts UserMemoryContact[]

  contactListId String?      @db.ObjectId
  ContactList   ContactList? @relation("ContactListToUserMemories", fields: [contactListId], references: [id])

  isPublish Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_memory")
}

// payment data store
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
}

enum CommissionType {
  REFERRAL
  PARTNER
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  offerCodeId           String? @db.ObjectId
  useUserPoint          Int?
  userUsedReferCode     String?
  currency              String
  contactLimit          Int
  amountPay             Float
  amountPricing         Float
  amountOfferCode       Float
  amountUserPoint       Float?
  stripePaymentIntentId String?

  // Commission fields
  commissionType       CommissionType? // "REFERRAL" or "PARTNER"
  commissionAmount     Float? // Calculated commission amount
  commissionReceiverId String?         @db.ObjectId // User or Partner who receives commission
  startDate            DateTime
  endDate              DateTime

  userId             String            @db.ObjectId
  user               User?             @relation("PaymentUser", fields: [userId], references: [id])
  subscriptionPlanId String?           @db.ObjectId
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  pricingOptionId    String?           @db.ObjectId
  pricingOption      PricingOption?    @relation(fields: [pricingOptionId], references: [id])

  status PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// =======================================================
// ===================== User End =======================
// =======================================================

// =======================================================
// ===================== Partner Start =====================
// =======================================================

// partner status
model PartnerCode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  partnerCode String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
  userId      String   @unique @db.ObjectId

  // @@unique([userId, partnerCode])
  @@map("user_partner_code")
}

// =======================================================
// ===================== Partner End =======================
// =======================================================

// =======================================================
// ===================== Admin Start =====================
// =======================================================

// ================ Subscription ================

type EligibilityJson {
  minAge Int
}

enum LevelId {
  Price_1
  Price_2
  Price_3
}

model SubscriptionPlan {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  contactLimit Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  pricingOptions PricingOption[]
  offerCodes     OfferCodeSubscriptionPlan[]
  Payment        Payment[]

  @@map("subscriptions")
}

model PricingOption {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  label            String
  levelId          LevelId
  amount           Float
  durationInMonths Int?
  eligibility      EligibilityJson?

  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String           @db.ObjectId

  offerCodes OfferCodePricingOption[] @relation("OfferCodesForPricingOption")
  Payment    Payment[]

  @@unique([levelId, subscriptionPlanId])
  @@map("pricing_options")
}

// ===================== Offer Codes ====================
enum DiscountType {
  PERCENTAGE
  FIXED
}

enum UserType {
  ALL
  PAID
  NON_PAID
  SELECTED
}

// offer code model
model OfferCode {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique

  discountType  DiscountType
  discountValue Float

  userType    UserType
  targetUsers UserOfferCode[]

  expiresAt DateTime?

  applicablePlans       OfferCodeSubscriptionPlan[]
  pricingOptionsLevelId OfferCodePricingOption[]
  optionLevelId         LevelId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@map("offer_codes")
}

// ===================== Tag Management ====================

enum DynamicFieldStatus {
  DRAFT
  PUBLISHED
}

enum DynamicFieldCategory {
  CORE_TAGS
  KEY_INFORMATION_SECTIONS
}

enum DynamicFieldType {
  TEXT
  SELECT
  FILE
}

// dynamic field
model DynamicField {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  fieldName String
  type      DynamicFieldType
  options   String[] // if type == select, will be an array; otherwise can be null
  status    DynamicFieldStatus
  category  DynamicFieldCategory
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([fieldName, category])
  @@map("dynamic_field")
}

// User Dynamic field value store
model UserDynamicFieldValue {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  user      User                 @relation(fields: [userId], references: [id])
  userId    String               @db.ObjectId
  fieldName String
  value     String?
  text     String?
  fieldType DynamicFieldType
  category  DynamicFieldCategory
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("dynamic_field_value")
}

// post tags
model Tags {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  route  String  @unique
  status Boolean @default(true)

  userMemories UserMemory[] @relation("TagsToUserMemories")

  @@map("tags")
}

// =======================================================
// ===================== Admin End =====================
// =======================================================

// =======================================================
// ===================== Many-to-Many Relation Start =====================
// =======================================================

// Join table for OfferCode & Subscription Plan
model OfferCodeSubscriptionPlan {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  offerCode          OfferCode        @relation(fields: [offerCodeId], references: [id])
  offerCodeId        String           @db.ObjectId
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String           @db.ObjectId

  @@map("offer_code_subscription_plan")
}

// join table for OfferCode and PricingOption
model OfferCodePricingOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  offerCode   OfferCode @relation(fields: [offerCodeId], references: [id])
  offerCodeId String    @db.ObjectId

  pricingOption   PricingOption @relation("OfferCodesForPricingOption", fields: [pricingOptionId], references: [id])
  pricingOptionId String        @db.ObjectId

  @@unique([offerCodeId, pricingOptionId])
  @@map("offer_code_pricing_option")
}

// join table for User and OfferCode
model UserOfferCode {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  offerCode   OfferCode @relation(fields: [offerCodeId], references: [id])
  offerCodeId String    @db.ObjectId

  @@map("user_offer_codes")
}

// Join table for UserMemoryContact
model UserMemoryContact {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userMemory   UserMemory  @relation(fields: [userMemoryId], references: [id])
  userMemoryId String      @db.ObjectId
  contact      ContactList @relation(fields: [contactId], references: [id])
  contactId    String      @db.ObjectId

  @@unique([userMemoryId, contactId])
  @@map("user_memory_contact")
}

// =======================================================
// ===================== Many-to-Many Relation End =====================
// =======================================================
