
generator client {
  provider = "prisma-client-js"
}

// Database connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ====================== User ======================
enum LoginType {
  USER
  PARTNER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  PARTNER
  USER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @unique
  fullName        String
  email           String     @unique
  otp             Int?
  expirationOtp   DateTime?
  password        String
  address         String
  role            UserRole   @default(USER)
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  loginType       LoginType  @default(USER)
  phoneNumber     String
  dob             DateTime
  idDocument      String? // URL to uploaded ID document
  referralCode    String?
  termsAccepted   Boolean    @default(false)
  privacyAccepted Boolean    @default(false)
  isVerified      Boolean    @default(false)
  isDeceased      Boolean    @default(false)

  offerCodes      UserOfferCode[]

  @@map("users")
}

// ================ Subscription ================

type EligibilityJson {
  minAge Int
}

enum LevelId {
  Price_1
  Price_2
  Price_3
}

model SubscriptionPlan {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  contactLimit Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  pricingOptions PricingOption[]
  offerCodes     OfferCodeSubscriptionPlan[]

  @@map("subscriptions")
}

model PricingOption {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  label            String
  levelId          LevelId
  amount           Float
  durationInMonths Int?
  eligibility      EligibilityJson?

  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String           @db.ObjectId

  offerCodes OfferCodePricingOption[] @relation("OfferCodesForPricingOption")

  @@unique([levelId, subscriptionPlanId])
  @@map("pricing_options")
}

// ===================== Offer Codes ====================
enum DiscountType {
  PERCENTAGE
  FIXED
}

enum UserType {
  ALL
  PAID
  NON_PAID
  SELECTED
}

// offer code model
model OfferCode {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique

  discountType  DiscountType
  discountValue Float

  userType     UserType
  targetUsers  UserOfferCode[]

  expiresAt DateTime?

  applicablePlans       OfferCodeSubscriptionPlan[]
  pricingOptionsLevelId OfferCodePricingOption[]
  optionLevelId          LevelId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@map("offer_codes")
}

model OfferCodeSubscriptionPlan {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  offerCode          OfferCode        @relation(fields: [offerCodeId], references: [id])
  offerCodeId        String           @db.ObjectId
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String           @db.ObjectId
}

model OfferCodePricingOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  offerCode   OfferCode @relation(fields: [offerCodeId], references: [id])
  offerCodeId String    @db.ObjectId

  pricingOption   PricingOption @relation("OfferCodesForPricingOption", fields: [pricingOptionId], references: [id])
pricingOptionId String        @db.ObjectId
}

model UserOfferCode {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  offerCode   OfferCode @relation(fields: [offerCodeId], references: [id])
  offerCodeId String    @db.ObjectId
}
